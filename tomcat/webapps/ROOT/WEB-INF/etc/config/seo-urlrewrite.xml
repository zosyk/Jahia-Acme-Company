<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE urlrewrite PUBLIC "-//tuckey.org//DTD UrlRewrite 3.2//EN"
        "http://tuckey.org/res/dtds/urlrewrite3.2.dtd">
<urlrewrite>

	<!-- Inbound rules -->
    <rule>
        <note>Add trailing / </note>
        <condition type="attribute" name="jahiaSkipInboundSeoRules" operator="notequal">^true$</condition>
        <from>^/cms$</from>
        <to>/cms/</to>
    </rule>

    <rule>
        <note>Add cms part</note>
        <condition type="attribute" name="jahiaSkipInboundSeoRules" operator="notequal">^true$</condition>
        <condition type="attribute" name="jahiaSeoAddCmsPrefix" operator="equal">^true$</condition>
        <from>^/(.*)$</from>
        <to>/cms/$1</to>
    </rule>

    <rule>
        <note>Add trailing /</note>
        <condition type="attribute" name="jahiaSkipInboundSeoRules" operator="notequal">^true$</condition>
        <condition type="attribute" name="jahiaSiteKeyForCurrentServerName" operator="notequal">^$</condition>
        <condition type="attribute" name="vanityUrlTargetPath" operator="equal">^$</condition>
        <from>^/cms/([a-z]{2}(_[A-Z]{2})?)$</from>
        <to>/cms/$1/</to>
    </rule>

    <rule>
        <note>Add language to URL if not present</note>
        <condition type="attribute" name="jahiaSkipInboundSeoRules" operator="notequal">^true$</condition>
        <condition type="attribute" name="siteDefaultLanguage" operator="notequal">^$</condition>
        <condition type="request-uri" operator="notequal">^(/[\p{Alnum}\-_]*)?/(cms/)?[a-z]{2}(_[A-Z]{2})?/.*</condition>
        <condition type="attribute" name="vanityUrlTargetPath" operator="equal">^$</condition>
        <from>^/cms/(.*)$</from>
        <to>/cms/%{attribute:siteDefaultLanguage}/$1</to>
    </rule>
    
    <rule>
        <note>Add the key of the site if it was resolved by server name, and if URL does not start with /users or /sites</note>
        <condition type="attribute" name="jahiaSkipInboundSeoRules" operator="notequal">^true$</condition>
        <condition type="attribute" name="jahiaSiteKeyForCurrentServerName" operator="notequal">^$</condition>
        <condition type="attribute" name="vanityUrlTargetPath" operator="equal">^$</condition>
        <condition type="request-uri" operator="notequal">^(/[\p{Alnum}\-_]*)?/(cms/)?([a-z]{2}(_[A-Z]{2})?/)?users/.*</condition>
        <condition type="request-uri" operator="notequal">^(/[\p{Alnum}\-_]*)?/(cms/)?([a-z]{2}(_[A-Z]{2})?/)?sites/.*</condition>
        <from>^/cms/([a-z]{2}(_[A-Z]{2})?/)?(.*)$</from>
        <to>/cms/$1sites/%{attribute:jahiaSiteKeyForCurrentServerName}/$3</to>
    </rule>

    <rule>
        <condition type="attribute" name="jahiaSkipInboundSeoRules" operator="notequal">^true$</condition>
        <name>Add the /cms/render/live part</name>
        <note>Prepend /cms/render/live to all page requests, which do not have it yet</note>
        <from>^/cms/(.*)$</from>
        <to last="true">/cms/render/live/$1</to>
    </rule>

    <!-- Outbound rules -->
    <outbound-rule>
        <name>Perform outbound URL analysis</name>
        <note>
            Main analysis of the outbound URL (link in the generated HTML response) is done here.
            
            Checks if the target site key in the processed URL is mapped to the current server name. If yes, it sets the request variable jahiaSiteKeyMatchesCurrentServerName to true.
            
            If the language in the URL matches the default language of the target site, sets jahiaSiteKeyMatchesDefaultLanguage to true. In such case the jahiaSeoLanguageToken is set
            to an empty string. Otherwise the jahiaSeoLanguageToken is set to e.g. "/en" for English.
            
            If the /cms prefix should be removed (if the removal is not disabled by setting urlRewriteRemoveCmsPrefix to false in jahia.properties) and the following
            path is not starting with the reserved keyword, the jahiaSeoCmsToken attribute will be set to an empty string. Othewise it will be set to /cms to preserve the prefix.
        </note>
        <from>^(/[\p{Alnum}\-_]*)?/cms/render/live/([a-zA-Z_]{2,5})/sites/([\p{Alnum}\-_]+)/(.*)$</from>
        <run class="org.jahia.services.seo.urlrewrite.ServerNameToSiteMapper" method="analyzeLink(HttpServletRequest, String, String, String, String)"/>
    </outbound-rule>
    
    <outbound-rule>
        <name>Handle link to a resource of same site</name>
        <note>
            Removes the site key from the URL if the current server name is mapped to this site.
            Removes the language token if it is the default language of the site.
        </note>
        <condition type="attribute" name="jahiaSiteKeyMatchesCurrentServerName" operator="equal">^true$</condition>
        <condition type="attribute" name="jahiaSeoServernameForLink" operator="equal">^$</condition>
        <from>^(/[\p{Alnum}\-_]*)?/cms/render/live/([a-zA-Z_]{2,5})/sites/([\p{Alnum}\-_]+)(/.*)?$</from>
        <to>$1%{attribute:jahiaSeoCmsToken}%{attribute:jahiaSeoLanguageToken}$4</to>
    </outbound-rule>
    
    <outbound-rule>
        <name>Handles link to a resource of another site: keep hostname</name>
        <note>
            A link is to a resource on another site.
            Keeps the site key in the URL.
            Removes the language token if it is the default language of the target site.
        </note>
        <condition type="attribute" name="jahiaSiteKeyMatchesCurrentServerName" operator="notequal">^true$</condition>
        <condition type="attribute" name="jahiaSeoServernameForLink" operator="equal">^$</condition>
        <from>^(/[\p{Alnum}\-_]*)?/cms/render/live/([a-zA-Z_]{2,5})/sites/([\p{Alnum}\-_]+)(/.*)?$</from>
        <to>$1%{attribute:jahiaSeoCmsToken}%{attribute:jahiaSeoLanguageToken}/sites/$3$4</to>
    </outbound-rule>
    
    <outbound-rule>
        <name>Handles link to a resource of another site: switch hostname</name>
        <note>
            Removes the site key from the URL and changes the server name.
            Removes the language token if it is the default language of the target site.
            Removes the /render/live part.
            Removes the /cms part if not disabled and in case the following path does not start with a reserved prefix.
        </note>
        <condition type="attribute" name="jahiaSeoServernameForLink" operator="notequal">^$</condition>
        <from>^(/[\p{Alnum}\-_]*)?/cms/render/live/([a-zA-Z_]{2,5})/sites/([\p{Alnum}\-_]+)(/.*)?$</from>
        <to>%{scheme}://%{attribute:jahiaSeoServernameForLink}$1%{attribute:jahiaSeoCmsToken}%{attribute:jahiaSeoLanguageToken}$4</to>
    </outbound-rule>
    
    <outbound-rule>
        <name>Perform outbound URL analysis (URLs with vanity mappings)</name>
        <note>Those URLs were not modified by the previous rules. Will check if the /cms should and can be removed.</note>
        <from>^(/[\p{Alnum}\-_]*)?/cms/render/live/(.*)$</from>
        <run class="org.jahia.services.seo.urlrewrite.ServerNameToSiteMapper" method="checkCmsPrefix(HttpServletRequest, String, String)"/>
    </outbound-rule>
    <outbound-rule>
        <name>Remove the /cms/render/live part</name>
        <note>Removes the /render/live part for remaining URLs and /cms if not disabled and if the path does not start with a reserved word.</note>
        <from>^(/[\p{Alnum}\-_]*)?/cms/render/live/(.*)?$</from>
        <to>$1%{attribute:jahiaSeoCmsToken}/$2</to>
    </outbound-rule>

    <outbound-rule>
        <name>Perform outbound URL analysis on files link</name>
        <note>
            Main analysis of the outbound URL (link in the generated HTML response) is done here.

            Checks if the target site key in the processed URL is mapped to the current server name. If yes, it sets the request variable jahiaSiteKeyMatchesCurrentServerName to true.
        </note>
        <from>^(/[\p{Alnum}\-_]*)?/files/live/sites/([\p{Alnum}\-_]+)/(.*)$</from>
        <run class="org.jahia.services.seo.urlrewrite.ServerNameToSiteMapper" method="analyzeLink(HttpServletRequest, String, String, String)"/>
    </outbound-rule>

    <outbound-rule>
        <name>Handles files link to a resource of another site: switch hostname</name>
        <note>
            Removes the site key from the URL and changes the server name.
            Removes the /live part.
        </note>
        <condition type="attribute" name="jahiaSeoServernameForLink" operator="notequal">^$</condition>
        <from>^(/[\p{Alnum}\-_]*)?(/files/live/.*)$</from>
        <to>%{scheme}://%{attribute:jahiaSeoServernameForLink}$1$2</to>
    </outbound-rule>

</urlrewrite>